From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Spottedleaf <Spottedleaf@users.noreply.github.com>
Date: Fri, 19 Apr 2025 21:00:00 +0700
Subject: [PATCH] Teleport Async Patch

--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -9,6 +10,8 @@
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ExecutionException;
+
 import io.papermc.paper.entity.LookAnchor;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
@@ -234,12 +235,25 @@
 
     @Override
     public boolean teleport(Location location) {
+        if (true)
+            try {
+                this.server.getLogger().warning("Trying to teleport entity using redirection from teleport to teleportAsync. Please use teleportAsync instead of teleport!");
+                this.teleportAsync(location, TeleportCause.PLUGIN, new io.papermc.paper.entity.TeleportFlag[0]).get();
+                return true;
+            } catch (InterruptedException | ExecutionException e) {
+                throw new RuntimeException(e);
+            }
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
     @Override
     public boolean teleport(Location location, TeleportCause cause) {
         // Paper start - Teleport passenger API
+        if (true) {
+            this.server.getLogger().warning("Trying to teleport entity using redirection from teleport to teleportAsync. Please use teleportAsync instead of teleport!");
+            this.teleportAsync(location, cause);
+            return true;
+        }
         return teleport(location, cause, new io.papermc.paper.entity.TeleportFlag[0]);
     }
 
@@ -247,6 +248,16 @@
     public boolean teleport(Location location, TeleportCause cause, io.papermc.paper.entity.TeleportFlag... flags) {
         // Folia start - region threading
         if (true) {
+            this.server.getLogger().warning("Trying to teleport entity using redirection from teleport to teleportAsync. Please use teleportAsync instead of teleport!");
+            try {
+                this.teleportAsync(location, cause, flags).get();
+                return true;
+            } catch (InterruptedException | ExecutionException e) {
+                throw new RuntimeException(e);
+            }
+        }
+        // Folia start - region threading
+        if (false) {
             throw new UnsupportedOperationException("Must use teleportAsync while in region threading");
         }
         // Folia end - region threading
@@ -307,11 +308,27 @@
 
     @Override
     public boolean teleport(org.bukkit.entity.Entity destination) {
+        if (true)
+            try {
+                this.server.getLogger().warning("Trying to teleport entity using redirection from teleport to teleportAsync. Please use teleportAsync instead of teleport!");
+                this.teleportAsync(destination.getLocation(), TeleportCause.PLUGIN, new io.papermc.paper.entity.TeleportFlag[0]).get();
+                return true;
+            } catch (InterruptedException | ExecutionException e) {
+                throw new RuntimeException(e);
+            }
         return this.teleport(destination.getLocation());
     }
 
     @Override
     public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause cause) {
+        if (true)
+            try {
+                this.server.getLogger().warning("Trying to teleport entity using redirection from teleport to teleportAsync. Please use teleportAsync instead of teleport!");
+                this.teleportAsync(destination.getLocation(), cause, new io.papermc.paper.entity.TeleportFlag[0]).get();
+                return true;
+            } catch (InterruptedException | ExecutionException e) {
+                throw new RuntimeException(e);
+            }
         return this.teleport(destination.getLocation(), cause);
     }
 
